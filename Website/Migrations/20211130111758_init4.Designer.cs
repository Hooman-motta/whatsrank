// <auto-generated />
using System;
using DbLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Website.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211130111758_init4")]
    partial class init4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbLayer.Entities.TblArtist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KeyWord")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ThumbnailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblArtist");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistCinemaRole", b =>
                {
                    b.Property<long>("CinemaRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.HasKey("CinemaRoleId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("TblArtistCinemaRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistMovieRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("CinemaRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CinemaRoleId");

                    b.HasIndex("MovieId");

                    b.ToTable("TblArtistMovieRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ArtistId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArtistMovieRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistMovieRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("TblArtistVote");
                });

            modelBuilder.Entity("DbLayer.Entities.TblCinemaRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TblCinemaRole");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "تهیه کننده",
                            Type = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            Title = "کارگردان",
                            Type = (byte)2
                        },
                        new
                        {
                            Id = 3L,
                            Title = "بازیگر",
                            Type = (byte)3
                        },
                        new
                        {
                            Id = 4L,
                            Title = "فیلم نامه نویس",
                            Type = (byte)4
                        },
                        new
                        {
                            Id = 5L,
                            Title = "مدیر تصویر برداری",
                            Type = (byte)5
                        },
                        new
                        {
                            Id = 6L,
                            Title = "تدوین گر",
                            Type = (byte)6
                        },
                        new
                        {
                            Id = 7L,
                            Title = "آهنگساز",
                            Type = (byte)7
                        },
                        new
                        {
                            Id = 8L,
                            Title = "طراح صحنه",
                            Type = (byte)8
                        },
                        new
                        {
                            Id = 9L,
                            Title = "طراح لباس",
                            Type = (byte)9
                        },
                        new
                        {
                            Id = 10L,
                            Title = "صدابردار",
                            Type = (byte)10
                        },
                        new
                        {
                            Id = 11L,
                            Title = "صداگذار",
                            Type = (byte)11
                        },
                        new
                        {
                            Id = 12L,
                            Title = "طراح گریم",
                            Type = (byte)12
                        },
                        new
                        {
                            Id = 13L,
                            Title = "نمایشنامه نویس",
                            Type = (byte)13
                        },
                        new
                        {
                            Id = 14L,
                            Title = "دراماتورژ",
                            Type = (byte)14
                        },
                        new
                        {
                            Id = 15L,
                            Title = "طراح نور",
                            Type = (byte)15
                        },
                        new
                        {
                            Id = 16L,
                            Title = "سایر",
                            Type = (byte)16
                        });
                });

            modelBuilder.Entity("DbLayer.Entities.TblComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Extract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("VtyStarsWarId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VtyStarsWarId");

                    b.ToTable("TblComment");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TblJenre");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "کودک",
                            Type = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            Title = "انیمیشن",
                            Type = (byte)2
                        },
                        new
                        {
                            Id = 3L,
                            Title = "اکشن",
                            Type = (byte)3
                        },
                        new
                        {
                            Id = 4L,
                            Title = "کمدی",
                            Type = (byte)4
                        },
                        new
                        {
                            Id = 5L,
                            Title = "عاشقانه",
                            Type = (byte)5
                        },
                        new
                        {
                            Id = 6L,
                            Title = "کمدی عاشقانه",
                            Type = (byte)6
                        },
                        new
                        {
                            Id = 7L,
                            Title = "ترسناک",
                            Type = (byte)7
                        },
                        new
                        {
                            Id = 8L,
                            Title = "درام",
                            Type = (byte)8
                        },
                        new
                        {
                            Id = 9L,
                            Title = "تاریخی",
                            Type = (byte)9
                        },
                        new
                        {
                            Id = 10L,
                            Title = "مستند",
                            Type = (byte)10
                        },
                        new
                        {
                            Id = 11L,
                            Title = "خانوادگی",
                            Type = (byte)11
                        },
                        new
                        {
                            Id = 12L,
                            Title = "جنایی",
                            Type = (byte)12
                        },
                        new
                        {
                            Id = 13L,
                            Title = "اجتماعی",
                            Type = (byte)13
                        },
                        new
                        {
                            Id = 14L,
                            Title = "ورزشی",
                            Type = (byte)14
                        },
                        new
                        {
                            Id = 15L,
                            Title = "دینی",
                            Type = (byte)15
                        },
                        new
                        {
                            Id = 16L,
                            Title = "جنگی",
                            Type = (byte)16
                        });
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AnswerNO")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Option1")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Option2")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Option3")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Option4")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Question")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<string>("ThumbnailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("TblJustLover");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLoverAnswers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AnswerNO")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<long>("JustLoverId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JustLoverId");

                    b.HasIndex("UserId");

                    b.ToTable("TblJustLoverAnswers");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLoverWinner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("JustLoverId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JustLoverId");

                    b.HasIndex("UserId");

                    b.ToTable("TblJustLoverWinner");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("time");

                    b.Property<string>("KeyWord")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<string>("ThumbnailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("TblMovie");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieJenre", b =>
                {
                    b.Property<long>("JenreId")
                        .HasColumnType("bigint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.HasKey("JenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("TblMovieJenre");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieTags", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("MovieId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblMovieTags");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("TblMovieVote");
                });

            modelBuilder.Entity("DbLayer.Entities.TblSerialInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ParentId");

                    b.ToTable("TblSerialInfo");
                });

            modelBuilder.Entity("DbLayer.Entities.TblSerialVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<long>("SerialInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TblSerialInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TblSerialInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("TblSerialVote");
                });

            modelBuilder.Entity("DbLayer.Entities.TblTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TblTags");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWord")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Question")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Source")
                        .HasColumnType("ntext");

                    b.Property<byte>("Subject")
                        .HasColumnType("tinyint");

                    b.Property<string>("ThumbnailsUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblVtyStarsWar");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWarOptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Option")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("VtyStarsWarId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VtyStarsWarId");

                    b.ToTable("TblVtyStarsWarOptions");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWarTags", b =>
                {
                    b.Property<long>("VtyStarsWarId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("VtyStarsWarId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TblVtyStarsWarTags");
                });

            modelBuilder.Entity("DbLayer.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Education")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TblProvinceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TblProvinceId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d50a4889-8caf-4995-a025-3c6e64a58755",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caae4c28-ee3d-4214-8bf1-1370a4592f6a",
                            DateCreated = new DateTime(2021, 11, 30, 14, 47, 57, 367, DateTimeKind.Local).AddTicks(8746),
                            Education = (byte)1,
                            Email = "mehrshad@gmail.com",
                            EmailConfirmed = true,
                            IsAvailable = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "mehrshad@gmail.com",
                            NormalizedUserName = "mehrshad",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNio75X4h02ytTnDUFPCt1bSKZCbQvqmXA+u+qSIoluvkaJ5GUSXZko3CFHa/SMHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mehrshad"
                        });
                });

            modelBuilder.Entity("DbLayer.Identity.TblProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TblProvince");

                    b.HasData(
                        new
                        {
                            Id = 41L,
                            Title = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 44L,
                            Title = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 45L,
                            Title = "اردبیل"
                        },
                        new
                        {
                            Id = 31L,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 26L,
                            Title = "البرز"
                        },
                        new
                        {
                            Id = 84L,
                            Title = "ایلام"
                        },
                        new
                        {
                            Id = 77L,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21L,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 38L,
                            Title = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 56L,
                            Title = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 51L,
                            Title = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 58L,
                            Title = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 61L,
                            Title = "خوزستان"
                        },
                        new
                        {
                            Id = 24L,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 23L,
                            Title = "سمنان"
                        },
                        new
                        {
                            Id = 54L,
                            Title = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 71L,
                            Title = "فارس"
                        },
                        new
                        {
                            Id = 28L,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 25L,
                            Title = "قم	"
                        },
                        new
                        {
                            Id = 87L,
                            Title = "کردستان"
                        },
                        new
                        {
                            Id = 34L,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 83L,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 74L,
                            Title = "کهگیلویه وبویراحمد	"
                        },
                        new
                        {
                            Id = 17L,
                            Title = "گلستان"
                        },
                        new
                        {
                            Id = 13L,
                            Title = "گیلان"
                        },
                        new
                        {
                            Id = 66L,
                            Title = "لرستان"
                        },
                        new
                        {
                            Id = 11L,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 86L,
                            Title = "مرکزی"
                        },
                        new
                        {
                            Id = 76L,
                            Title = "هرمزگان"
                        },
                        new
                        {
                            Id = 81L,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 35L,
                            Title = "یزد"
                        });
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserCinemaRole", b =>
                {
                    b.Property<long>("CinemaRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CinemaRoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TblUserCinemaRole");
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserResume", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TblUserResume");
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserVote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VoterId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TblUserVote");
                });

            modelBuilder.Entity("DbLayer.Identity.TblVtyStarWarUserVote", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("VtyStarsWarOptionsId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "VtyStarsWarOptionsId");

                    b.HasIndex("VtyStarsWarOptionsId");

                    b.ToTable("TblVtyStarWarUserVote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0d17df86-bef2-4a8a-a669-9a8f923cb1a9",
                            ConcurrencyStamp = "67dcf097-ce61-4c25-9ab6-02d10c557d4b",
                            Name = "Owner",
                            NormalizedName = "Owner"
                        },
                        new
                        {
                            Id = "4a010e28-5dcb-4b03-b322-e297b35ec0b3",
                            ConcurrencyStamp = "b756bd49-8e96-4e3a-8bfd-6dfe7065041e",
                            Name = "Artist",
                            NormalizedName = "Artist"
                        },
                        new
                        {
                            Id = "553255fa-d15b-4761-a0de-bee0b807c6e1",
                            ConcurrencyStamp = "8e2ea8a4-daae-4497-a882-15295cea2882",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d50a4889-8caf-4995-a025-3c6e64a58755",
                            RoleId = "0d17df86-bef2-4a8a-a669-9a8f923cb1a9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistCinemaRole", b =>
                {
                    b.HasOne("DbLayer.Entities.TblArtist", "TblArtist")
                        .WithMany("TblArtistCinemaRole")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblCinemaRole", "TblCinemaRole")
                        .WithMany("TblArtistCinemaRole")
                        .HasForeignKey("CinemaRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblArtist");

                    b.Navigation("TblCinemaRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistMovieRole", b =>
                {
                    b.HasOne("DbLayer.Entities.TblArtist", "TblArtist")
                        .WithMany("TblArtistMovieRole")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblCinemaRole", "TblCinemaRole")
                        .WithMany("TblArtistMovieRole")
                        .HasForeignKey("CinemaRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblMovie", "TblMovie")
                        .WithMany("TblArtistMovieRole")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblArtist");

                    b.Navigation("TblCinemaRole");

                    b.Navigation("TblMovie");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistVote", b =>
                {
                    b.HasOne("DbLayer.Entities.TblArtistMovieRole", "TblArtistMovieRole")
                        .WithMany("TblArtistVote")
                        .HasForeignKey("ArtistMovieRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblArtistVote")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");

                    b.Navigation("TblArtistMovieRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblCinemaRole", b =>
                {
                    b.HasOne("DbLayer.Entities.TblCinemaRole", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DbLayer.Entities.TblComment", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblComment")
                        .HasForeignKey("UserId");

                    b.HasOne("DbLayer.Entities.TblVtyStarsWar", "TblVtyStarsWar")
                        .WithMany("TblComment")
                        .HasForeignKey("VtyStarsWarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TblVtyStarsWar");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLoverAnswers", b =>
                {
                    b.HasOne("DbLayer.Entities.TblJustLover", "TblJustLover")
                        .WithMany("TblJustLoverAnswers")
                        .HasForeignKey("JustLoverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblJustLoverAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("TblJustLover");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLoverWinner", b =>
                {
                    b.HasOne("DbLayer.Entities.TblJustLover", "TblJustLover")
                        .WithMany("TblJustLoverWinner")
                        .HasForeignKey("JustLoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblJustLoverWinner")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("TblJustLover");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieJenre", b =>
                {
                    b.HasOne("DbLayer.Entities.TblJenre", "TblJenre")
                        .WithMany("TblMovieJenre")
                        .HasForeignKey("JenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblMovie", "TblMovie")
                        .WithMany("TblMovieJenre")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblJenre");

                    b.Navigation("TblMovie");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieTags", b =>
                {
                    b.HasOne("DbLayer.Entities.TblMovie", "TblMovie")
                        .WithMany("TblMovieTags")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblTags", "TblTags")
                        .WithMany("TblMovieTags")
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblMovie");

                    b.Navigation("TblTags");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovieVote", b =>
                {
                    b.HasOne("DbLayer.Entities.TblMovie", "TblMovie")
                        .WithMany("TblMovieVote")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblMovieVote")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");

                    b.Navigation("TblMovie");
                });

            modelBuilder.Entity("DbLayer.Entities.TblSerialInfo", b =>
                {
                    b.HasOne("DbLayer.Entities.TblMovie", "TblMovie")
                        .WithMany("TblSerialInfo")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblSerialInfo", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");

                    b.Navigation("TblMovie");
                });

            modelBuilder.Entity("DbLayer.Entities.TblSerialVote", b =>
                {
                    b.HasOne("DbLayer.Entities.TblSerialInfo", "TblSerialInfo")
                        .WithMany("TblSerialVote")
                        .HasForeignKey("TblSerialInfoId");

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("TblSerialInfo");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWarOptions", b =>
                {
                    b.HasOne("DbLayer.Entities.TblVtyStarsWar", "TblVtyStarsWar")
                        .WithMany("TblVtyStarsWarOptions")
                        .HasForeignKey("VtyStarsWarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblVtyStarsWar");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWarTags", b =>
                {
                    b.HasOne("DbLayer.Entities.TblTags", "TblTags")
                        .WithMany("TblVtyStarsWarTags")
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblVtyStarsWar", "TblVtyStarsWar")
                        .WithMany("TblVtyStarsWarTags")
                        .HasForeignKey("VtyStarsWarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TblTags");

                    b.Navigation("TblVtyStarsWar");
                });

            modelBuilder.Entity("DbLayer.Identity.AppUser", b =>
                {
                    b.HasOne("DbLayer.Identity.TblProvince", "TblProvince")
                        .WithMany("AppUser")
                        .HasForeignKey("TblProvinceId");

                    b.Navigation("TblProvince");
                });

            modelBuilder.Entity("DbLayer.Identity.TblProvince", b =>
                {
                    b.HasOne("DbLayer.Identity.TblProvince", "Parent")
                        .WithMany("Towns")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserCinemaRole", b =>
                {
                    b.HasOne("DbLayer.Entities.TblCinemaRole", "TblCinemaRole")
                        .WithMany("TblUserCinemaRole")
                        .HasForeignKey("CinemaRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblUserCinemaRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TblCinemaRole");
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserResume", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblUserResume")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DbLayer.Identity.TblUserVote", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblUserVote")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DbLayer.Identity.TblVtyStarWarUserVote", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", "AppUser")
                        .WithMany("TblVtyStarWarUserVote")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Entities.TblVtyStarsWarOptions", "TblVtyStarsWarOptions")
                        .WithMany("TblVtyStarWarUserVote")
                        .HasForeignKey("VtyStarsWarOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("TblVtyStarsWarOptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbLayer.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DbLayer.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtist", b =>
                {
                    b.Navigation("TblArtistCinemaRole");

                    b.Navigation("TblArtistMovieRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblArtistMovieRole", b =>
                {
                    b.Navigation("TblArtistVote");
                });

            modelBuilder.Entity("DbLayer.Entities.TblCinemaRole", b =>
                {
                    b.Navigation("TblArtistCinemaRole");

                    b.Navigation("TblArtistMovieRole");

                    b.Navigation("TblUserCinemaRole");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJenre", b =>
                {
                    b.Navigation("TblMovieJenre");
                });

            modelBuilder.Entity("DbLayer.Entities.TblJustLover", b =>
                {
                    b.Navigation("TblJustLoverAnswers");

                    b.Navigation("TblJustLoverWinner");
                });

            modelBuilder.Entity("DbLayer.Entities.TblMovie", b =>
                {
                    b.Navigation("TblArtistMovieRole");

                    b.Navigation("TblMovieJenre");

                    b.Navigation("TblMovieTags");

                    b.Navigation("TblMovieVote");

                    b.Navigation("TblSerialInfo");
                });

            modelBuilder.Entity("DbLayer.Entities.TblSerialInfo", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TblSerialVote");
                });

            modelBuilder.Entity("DbLayer.Entities.TblTags", b =>
                {
                    b.Navigation("TblMovieTags");

                    b.Navigation("TblVtyStarsWarTags");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWar", b =>
                {
                    b.Navigation("TblComment");

                    b.Navigation("TblVtyStarsWarOptions");

                    b.Navigation("TblVtyStarsWarTags");
                });

            modelBuilder.Entity("DbLayer.Entities.TblVtyStarsWarOptions", b =>
                {
                    b.Navigation("TblVtyStarWarUserVote");
                });

            modelBuilder.Entity("DbLayer.Identity.AppUser", b =>
                {
                    b.Navigation("TblArtistVote");

                    b.Navigation("TblComment");

                    b.Navigation("TblJustLoverAnswers");

                    b.Navigation("TblJustLoverWinner");

                    b.Navigation("TblMovieVote");

                    b.Navigation("TblUserCinemaRole");

                    b.Navigation("TblUserResume");

                    b.Navigation("TblUserVote");

                    b.Navigation("TblVtyStarWarUserVote");
                });

            modelBuilder.Entity("DbLayer.Identity.TblProvince", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("Towns");
                });
#pragma warning restore 612, 618
        }
    }
}
